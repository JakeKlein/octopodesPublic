{
    "collab_server" : "",
    "contents" : "###Set Directory\nsetwd('/Users/jakeklein/WIP');\npath = getwd();\n###Functions\nfunctionsPath = file.path(path,'Functions');\nfor (i in 1:length(list.files(functionsPath)))source(file.path(functionsPath, list.files(functionsPath)[i]));\n\n\n###Dependencies\ndependenciesPath = file.path(path, 'Dependencies');\nfor (i in 1:length(list.files(dependenciesPath)))source(file.path(dependenciesPath, list.files(dependenciesPath)[i]));\n\n###Data\ndataPath = file.path(path, 'Data');\nif(!exists('dataEnv')) dataEnv = new.env();\ndata = list.files(dataPath, pattern = '*.csv');\nfor (i in 1:length(data)) {\n  fileName = data[i];\n  fileNameClean = strsplit(fileName, split = '[.]')[[1]][1];\n  dataFilePath = file.path(dataPath, data[i]);\n  assign(fileNameClean, fread(dataFilePath), envir = dataEnv);\n  rm(dataFilePath);\n}\n##MetaData\nmetaDataFields = c('predictors', 'responses', 'models', 'functions', 'data', 'commands', 'formulas');\nif(!exists('predictors')) predictors = data.table(model = character(), version = integer(), predictor = character());\nif(!exists('responses')) responses = data.table(model = character(), response = character());\nif(!exists('formulas')) formulas = data.table(model = character(), version = integer(), formula = character());\nif(!exists('models')) models = data.table(model = character(), version = integer(), data = character(), response = character(), predictors = character(), formula = character());\n#if(!exists('commands')) commands = \nfunctions = lsf.str();\n\n\n\n###Models\nmodelPath = file.path(path, 'Models');\nif(!exists('modelEnv')) modelEnv = new.env();\n\n\n\nrun = TRUE;\n\n\n\nfor (i in 1:length(list.files(functionsPath)))source(file.path(functionsPath, list.files(functionsPath)[i]));\n\n\n{\n  while(run == TRUE){\n    input = readline(prompt = ' >> ');\n    inputLower = tolower(input);\n    inputSplitComma = strsplit(inputLower, ',')[[1]];\n    inputSplitSpace = strsplit(inputLower, ' ')[[1]];\n    inputLength = length(inputSplitSpace);\n    command = inputSplitSpace[1];\n    if (\n      inputLower == 'quit' || inputLower == 'quit()' || inputLower == 'exit' || inputLower == 'exit()'\n    ) {\n      run = FALSE;\n      break;\n    }\n    if(\n      command == 'clear'\n    ) {\n      clearConsole();\n      next;\n    }\n    if(\n      command == 'list'\n    ){\n      collection = inputSplitSpace[2];\n      modelName = inputSplitSpace[3];\n      modelVersion = inputSplitSpace[4];\n      if(!collection %in% metaDataFields){ \n        message(paste0(collection, \" not valid option for 'list' method\"));\n        next;\n      } else{\n        listMetaData(collection, modelName, modelVersion);\n        next;\n      }\n    }\n    if(\n      command == 'predictor'\n    ) {\n        if(inputLength > 3){\n          message(paste0(\"Error: 'predictor' method expects 2 arguments but received \", inputLength - 1, \". Make sure predictors arg contains no spaces.\"));\n          next;\n        }\n        model = inputSplitSpace[2];\n        predictor = strsplit(inputSplitSpace[3], ',')[[1]];\n        if(is.na(model) || is.na(predictor)){\n          message(\"Error: Invalid option for 'predictor' method. Either 'model' or 'predictor' arg incorrect\");\n          next;\n        } else { \n          addPredictors(assignPredictors(model, predictor));\n          next;\n        }\n    } \n    if(\n      command == 'response'\n    ) {\n      if(inputLength > 3){\n        message(paste0(\"Error: 'response' method expects 2 arguments but received \", inputLength - 1, \". Make sure only one reponse argument is provided.\"));\n        next;\n      }\n      model = inputSplitSpace[2];\n      response = inputSplitSpace[3];\n      if(is.na(model) || is.na(response)){\n        message(\"Invalid option for 'response' method. Either 'model' or 'response' arg incorrect\");\n        next;\n      } else { \n        addResponse(assignResponse(model, response));\n        next;\n      }\n    }\n    if(\n      command == 'copy'\n    ) {\n      if(inputLength > 2){\n        message(\"Invalid option for 'copy' method.  Method can only copy one (1) file at a time.\");\n        next;\n      } else {\n        filePath = inputSplitSpace[2];\n        copyDataFile(filePath);\n        dataFiles = list.files(dataPath, pattern = '.csv');\n        for(i in 1:length(dataFiles)){\n          if(!dataFiles[i] %in% data) {\n            data = append(data, dataFiles[i]);\n            fileNameClean = strsplit(dataFiles[i], split = '[.]')[[1]][1];\n            assign(dataFiles[i], fread(file.path(dataPath, fileNameClean)), envir = dataEnv);\n          }\n        }\n        next;\n      }\n    }\n    if(\n      command == 'formula'\n    ) {\n      if(inputLength > 3){\n        message(paste0(\"Error: 'formula' method expects 2 arguments but received \", inputLength - 1, \". Passable arguments are modelName (required) and modelVersion (optional).\"));\n        next;\n      }\n      model = inputSplitSpace[2];\n      version = inputSplitSpace[3];\n      if(is.na(model)){\n        message(\"Invalid option for 'formula' method. modelName arg incorrect.\");\n        next;\n      } else { \n        addFormula(buildFormula(model, version));\n        next;\n      }\n    }\n    if(\n      command == 'tree'\n    ) {\n      if(inputLength > 4) {\n        message(paste0(\"Error: 'tree' method expects 3 arguments but received \", inputLength - 1, \". Passable arguments are modelName (required), modelData (required), and modelVersion (optional).\"));\n        next;\n      }\n      model = inputSplitSpace[2];\n      trainData = inputSplitSpace[3];\n      version = inputSplitSpace[4];\n      if(is.na(model) || is.na(trainData)) {\n        message(\"Invalid option for 'tree' method. modelName and/or modelData arg(s) incorrect.\");\n        next;\n      } else {\n        buildTree(model, trainData, version);\n        addModel(assignModel(model, trainData, version));\n      }\n    }\n    else exec(input);\n  }\n}\n",
    "created" : 1554494462198.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1864217722",
    "id" : "59BC0A",
    "lastKnownWriteTime" : 1557076307,
    "last_content_update" : 1557076307251,
    "path" : "~/WIP/main.R",
    "project_path" : "main.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}